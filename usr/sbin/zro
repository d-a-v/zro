#!/bin/sh

# License: GPLv2 (see COPYING) or any later version
# Authors: david gauchard <david@unixrox.net>

name=zro
tmpfs=/run/$name	# can be already be a tmpfs
tmpfsize=20%		# tmpfs option
fill=80%		# % of tmpfs free space
fstab=/etc/fstab
nfstab=/tmp/fstab.new

# todo
# check empty z dir on umount after rsync
# --stop too verbose in case of problem
# what to do on busy umount: sync or not ?
# test change [(space)(tab)] with [[:space:]] or [[:blank:]] in greps

help ()
{
	cat << EOF

Options:
`grep -- '^[^#]*-[^ ]*).*#' $0 | sed -e 's,),,1' -e 's,\\\\,,1' -e 's,#,,1' -e 's,\t\t*,\t,g'`

default tmpfs location is $tmpfs (if not specified as first arg in mount entry)

EOF
}

md ()
{
cat << EOF
	This is designed to allow running a read-only root
	filesystem while keeping some r/w locations (/tmp,
	var/log, ...).  It might be useful on embedded systems. 
	Compared to tmpfs, ram data are compressed, files on
	real file-system and tmp filesystem coexist thanks to
	unionfs, and an effort is done to allow synchronisation
	of the ram data onto the real filesystem.  This is not
	automatic though, processes keeping opened files needs
	to be cleanly stopped for syncronisation and restarted
	after.
	
	This is combining unionfs-fuse, btrfs and tmpfs.

	This is so far designed on and for debian derivatives.
EOF
}

desc ()
{
cat << EOF
zro multicommand script:
	ro [<dir>]		remount <dir> (default /) as read-only
	rw [<dir>]		remount <dir> (default /) as read-write
	apt-get/aptitude [...]	if needed, remount r/w before and r/o after executing the real command
	umount.fuse.zro		called by umount: sync modified files then revert to original directory
	mount.zro		called by mount, mount options:
	.	.	.	size=<tmpfs-size> - default:$tmpfsize (see tmpfs man page)
	.	.	.	fill=<fill[%]> - default:$fill - filesystem size(%) created in the tmpfs
	.	.	.	umask=<umask> - default:022 (use 000 for '/tmp'-like directories)
	zro <options>		manage fstab, see Options below

EOF
	md
	help
}

is_rw ()
{
	d="$1"
	test -z "$d" && d=/
	test -w "$d"
}

is_empty ()
{
	dir="$1"
	files=$(echo "$dir"/.* "$dir"/*)
	test "$files" = "$dir/. $dir/.. $dir/*"
}

is_mounted ()
{
	< /proc/mounts awk '{print $2;}' | grep "^$1\$" > /dev/null
}

fstype ()
{
	stat -f -c '%T' "$1"
}

show_access_w ()
{
	lsof -nP | grep '[uw][uw ]*REG' | cut -d/ -f2-3 | sort -u
}

ro ()
{
	d="$1"
	test -z "$d" && d=/
	if is_rw "$d"; then
		echo "Remounting '$d' read-only"
		if ! mount -o remount,ro "$d"; then
			lsof "$d"
			false
		fi
	fi
}

rw ()
{
	d="$1"
	test -z "$d" && d=/
	if ! is_rw "$d"; then
		echo "Remounting '$d' read-write"
		mount -o remount,rw "$d"
	fi
}

show_zros ()
{
	sed -nr 's,^[^ 	#]+[ 	]+([^ 	]+)[ 	]+zro.*$,\1,pg' < $fstab
}

log1 ()
{
	if $verbose; then
		cat
	else
		cat > /dev/null
	fi
}

sync ()
{
	mounted=false
	is_mounted "$1" && mounted=:

	zro=$(sed -nr "s,^([^ 	#]+)[ 	]+$1[ 	]+zro.*$,\1,pg" < $fstab)
	if test -z "$zro"; then
		echo "$zro sync: is '$1' really $name-mounted ?" 1>&2
		ret=1
	else
		# if first char of $zro is not /, then set $zro to default
		test ${zro%${zro#?*}} = / || zro=$tmpfs

		if ! $mounted || umount -i "$1" 2>&1; then
			echo "$name: syncing '$1'" 1>&2
			if ! rsync -a --remove-source-files "$zro/t/z$1/" "$zro/t/b$1"; then
				echo 'is / rw-mounted ?' 1>&2
				ret=1
			fi
			if ! is_empty "$zro/t/z$1/"; then
				echo "could not synchronize '$zro/t/z$1/' to '$zro/t/b$1'" 1>&2
				ret=1
			fi
			$mounted && mount "$1" || true
		else
			echo "cannot umount '$1', it may be used by:" 1>&2
			lsof "$1" | grep "$1" 1>&2 || true
			ret=1
		fi
	fi
}

update_fstab ()
{
	date=`date '+%Y%m%d-%H%M%S'`
	echo "------------------------------- diff -c"
	same=false
	diff -c $fstab $nfstab && same=: || true
	echo "---------------------------------------"
	if $same; then
		echo "no fstab change"
	else
		echo 'do you agree (y/N)?'
		read ans
		test "$ans" = y || exit 1
		cp $fstab $fstab.$date
		echo "$fstab.$date created as a backup"
		mv $nfstab $fstab
		echo "$fstab updated"
	fi
}

rorw_apt ()
{
	if test "$1" = ro; then
	(
		cat << EOF 
DPkg::Pre-Invoke  { rw; };
DPkg::Post-Invoke { ro; };
EOF
	)	> /etc/apt/apt.conf.d/zro
	else
		rm -f /etc/apt/apt.conf.d/zro
	fi
}

rorw_slash ()
{
	# "$1" is ro or rw

	# get / mount options (add commas)
	#opts=`< $fstab grep -E '^[^ 	#]+[ 	]+/[ 	]+[^ 	]+[ 	]+[^ 	]+.*$' | sed -r 's;^[^ 	]+[ 	]+/[ 	]+[^ 	]+[ 	]+([^ 	]+).*$;,\1,;g'`
	opts=$(sed -nr 's;^[^ 	#]+[ 	]+/[ 	]+[^ 	]+[ 	]+([^ 	]+).*$;,\1,;pg' < $fstab)

	# remove ro or rw
	#opts=`echo "$opts" | sed 's;,r[ow],;,;g'`
	beg=${opts%,r[ow],*}
	end=${opts#*,r[ow],}
	test "$beg" = "$end" || opts=$beg,$end

	# remove first comma and add our ro/rw option
	opts="${opts#,}$1"

	# replace options in fstab
	sed -r "s;(^[^ 	#]+[ 	]+/[ 	]+[^ 	]+[ 	]+)[^ 	]+(.*)$;\1$opts\2;g" $fstab > $nfstab
	update_fstab
	
	# add apt's automatic remounts (does not work well)
	#rorw_apt "$1"
}

mount_zro ()
{
	zro=$1		# ex: "none" or "/run/zro"
	dest=$2		# ex: "/var/log"
	opts=,$4,	# ex: ",fill=80%,size=20%,"

	test -z "$zro" -o -z "$dest" && { echo "syntax: $0 <some-empty-or-to-be-created-dir> <existing-dir-to-cache> <mount-options>" 1>&2; exit 1; }

	# if first char of $zro is not /, then set $zro to default
	test ${zro%${zro#?*}} = / || zro=$tmpfs

	# create dir in (if not present, create btrfs on (if not present, create tmpfs on $zro/z)
	# create dir and bind mount dest on $zro/bind
	# union FS both on $dest

	[ $(fstype $dest) = fuseblk ] && { echo "$0: $dest already $name-mounted?" 1>&2; exit 1; }

	# parse options
	bad=false
	umask=022
	for o in `echo $opts | tr , ' '`; do
		case "$o" in
		size=*)	tmpfsize=${o#size=};;
		fill=*) fill=${o#fill=};;
		umask=*) umask=${o#umask=};;
		v|verb*) verbose=:;;
		noauto|rw) ;;
		ro) echo "$0 with option $o - are you kidding?" 1>&2;;
		noexec|nosuid|nodev|user) echo "$0: option $o not supported" 1>&2; bad=:;;
		*) echo "$0: unknown option $o" 1>&2; bad=:;;
		esac
	done
	$bad && exit 1
	tmpfsopts="size=$tmpfsize"
	fill=${fill%\%}

	mkdir -p $zro/t
	if [ $(fstype $zro/t) != tmpfs ]; then
		# create tmpfs in $zro/t
		mount -t tmpfs -o $tmpfsopts none "$zro/t"
	fi
	
	mkdir -p $zro/t/z
	if [ $(fstype $zro/t/z) != btrfs ]; then
		# create a btrfs fs for $zro/t/z
		btrfs=$zro/t/btrfs	# btrfs file
		availtmpfsk=$(($(df -P -k $zro/t | tail -1 | awk '{print $4;}') * $fill / 100))
		dd if=/dev/zero of="$btrfs" bs=1024 count=$availtmpfsk 2>&1 | log1
		mkfs.btrfs "$btrfs" | log1
		mount -o loop,compress-force=zlib,nobarrier,nodatacow,nodatasum,notreelog,ssd -t btrfs "$btrfs" "$zro/t/z"
	fi
	
	mkdir -p $zro/t/z/$dest
	if [ ! -r $zro/t/b/$dest ]; then
		mkdir -p $zro/t/b
		mount -t none -o bind / $zro/t/b
	fi
	
	unionfs-fuse -o cow,allow_other,nonempty,statfs_omit_ro,fsname=$name,subtype=$name,umask=$umask $zro/t/b/$dest=RO:$zro/t/z/$dest=RW $dest
}

umount_zro ()
{
	u="$1"
	test ! -z "$u" -a -d "$u" || { echo "$0: need zro directory to unmount" 1>&2; exit 1; }

	is_mounted "$u" || return 1
	
	# check fstab too
	if [ -d $tmpfs/t/z$u -a -d $tmpfs/t/b$u ]; then
		rw
		sync "$u"
	fi

	umount -i $u
}


apt ()
{
	remount_ro=false
	if ! is_rw; then
		rw
		remount_ro=:
	fi
	cmd="$1"
	shift
	/usr/bin/$cmd "$@"
	$remount_ro && ro
}

rm_dir ()
{
	for d in "$@"; do
		test -d "$d" && rmdir "$d"
	done
}

version=20141108.2241
verbose=false

set -e # globally rely on this

case "$1" in
	-h|--help)
		desc
		exit 0;;
esac

#base=`basename "$0"`
base=${0##*/}
case "$base" in
	ro) ro "$@"; exit $?;;
	rw) rw "$@"; exit $?;;
	mount.zro) mount_zro "$@"; exit $?;;
	umount.fuse.zro) umount_zro "$@"; exit $?;;
	apt-get|aptitude) apt "$base" "$@"; exit $?;;
	zro) ;;
	*) echo "zro: unrecognized '$base' invocation"; help; exit 1;;
esac

test -z "$1" && { help; exit 1; }

sync=false
syncall=false
stop=false
ret=0

while ! test -z "$1"; do
	case $1 in

		-a|--add)			# <mountpoint> - add dir as zro mountpoint in fstab
			add="$add $2"
			shift;;

		-r|--remove)			# <mountpoint(regexp)> - remove zro mountpoints from fstab (.* = all)
			remove="$remove|$2"
			shift;;
			
		-S|--sync)			# <mountpoint> - sync mountpoint to real fs (flushes ram)
			test -z "$2" && { help; exit 1; }
			sync "$2"
			shift;;
		
		-A|--syncall)			# - sync all zro mountpoints
			syncall=:;;
		
		-W|--rw) 			# - set / as rw in fstab
			rorw_slash rw;;
			
		-O|--ro) 			# - set / as ro in fstab
			rorw_slash ro;;
		
		-X|--stop)			# - sync all and umount everything
			stop=:;;
		
		--access-w)			# [<dir>] - show files opened in write or append mode
			show_access_w "$2"
			shift;;
		
		-h|--help)			# - help and wrappers description
			desc
			exit 0;;
		
		-v|--verbose)
			verbose=:;;

		-V|--version)			# - show version
			echo $version
			exit 0;;
		
		#debug
		-md) md; exit 0;;
		-man) help2man -s 8 -N $0 | man -l -; exit 0;;
		
		*)
			echo "unrecognized option '$1'"
			help
			exit 1;;
	esac
	shift
done

if test ! -z "$remove" -o ! -z "$add"; then
	if test ! -z "$remove"; then
		grep -Ev "^[^ 	#]+[ 	]+(${remove#|})[ 	]+zro.*$" < $fstab > $nfstab
	else
		cp $fstab $nfstab
	fi
	if test ! -z "$add"; then
		for a in $add; do 
			echo "none		$a	zro		defaults,umask=022	0	0"
		done >> $nfstab
	fi
	update_fstab
fi

if $syncall; then
	for d in $(show_zros); do
		echo "---> syncing '$d'"
		sync "$d" && echo "---< syncing '$d' done" || true # keep going
	done
	exit $ret
fi

if $stop; then
	for d in $(show_zros); do
		umount_zro $d 2>&1 || true
	done
	is_mounted $tmpfs/t/b && umount $tmpfs/t/b || true
	is_mounted $tmpfs/t/z && umount $tmpfs/t/z || true
	rm -f $tmpfs/t/btrfs || true
	rm_dir $tmpfs/t/b $tmpfs/t/z $tmpfs/t $tmpfs
fi

exit $ret
